// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Reels.Backoffice.Persistence.Configurations;

#nullable disable

namespace Reels.Backoffice.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250412205029_AddGenre")]
    partial class AddGenre
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Reels.Backoffice.Domain.Models.Category.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_category");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_category_id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Reels.Backoffice.Domain.Models.Genre.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_genre");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_genre_id");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("Reels.Backoffice.Domain.Models.Genre.GenreCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid")
                        .HasColumnName("genre_id");

                    b.HasKey("Id")
                        .HasName("pk_genre_category");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_genre_category_id");

                    b.HasIndex("GenreId", "CategoryId")
                        .HasDatabaseName("ix_genre_category_genre_id_category_id");

                    b.ToTable("GenreCategory", (string)null);
                });

            modelBuilder.Entity("Reels.Backoffice.Domain.Models.Genre.GenreCategory", b =>
                {
                    b.HasOne("Reels.Backoffice.Domain.Models.Genre.Genre", "Genre")
                        .WithMany("GenreCategories")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_genre_category_genre_genre_id");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Reels.Backoffice.Domain.Models.Genre.Genre", b =>
                {
                    b.Navigation("GenreCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
