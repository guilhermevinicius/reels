// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Reels.Backoffice.Persistence.Configurations;

#nullable disable

namespace Reels.Backoffice.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250413013927_AddVideo")]
    partial class AddVideo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Reels.Backoffice.Domain.Models.Category.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_category");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_category_id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Reels.Backoffice.Domain.Models.Genre.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_genre");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_genre_id");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("Reels.Backoffice.Domain.Models.Genre.GenreCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid")
                        .HasColumnName("genre_id");

                    b.HasKey("Id")
                        .HasName("pk_genre_category");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_genre_category_id");

                    b.HasIndex("GenreId", "CategoryId")
                        .HasDatabaseName("ix_genre_category_genre_id_category_id");

                    b.ToTable("GenreCategory", (string)null);
                });

            modelBuilder.Entity("Reels.Backoffice.Domain.Models.Video.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("EncodedPath")
                        .HasColumnType("text")
                        .HasColumnName("encoded_path");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_media");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_media_id");

                    b.ToTable("Media", (string)null);
                });

            modelBuilder.Entity("Reels.Backoffice.Domain.Models.Video.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<Guid?>("MediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_id");

                    b.Property<bool>("Opened")
                        .HasColumnType("boolean")
                        .HasColumnName("opened");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean")
                        .HasColumnName("published");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid?>("TrailerId")
                        .HasColumnType("uuid")
                        .HasColumnName("trailer_id");

                    b.Property<int>("YearLaunched")
                        .HasColumnType("integer")
                        .HasColumnName("year_launched");

                    b.HasKey("Id")
                        .HasName("pk_video");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_video_id");

                    b.HasIndex("MediaId")
                        .HasDatabaseName("ix_video_media_id");

                    b.HasIndex("TrailerId")
                        .HasDatabaseName("ix_video_trailer_id");

                    b.ToTable("Video", (string)null);
                });

            modelBuilder.Entity("Reels.Backoffice.Domain.Models.Video.VideoCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uuid")
                        .HasColumnName("video_id");

                    b.HasKey("Id")
                        .HasName("pk_video_category");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_video_category_id");

                    b.HasIndex("VideoId")
                        .HasDatabaseName("ix_video_category_video_id");

                    b.ToTable("VideoCategory", (string)null);
                });

            modelBuilder.Entity("Reels.Backoffice.Domain.Models.Video.VideoGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid")
                        .HasColumnName("genre_id");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uuid")
                        .HasColumnName("video_id");

                    b.HasKey("Id")
                        .HasName("pk_video_genre");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_video_genre_id");

                    b.HasIndex("VideoId")
                        .HasDatabaseName("ix_video_genre_video_id");

                    b.ToTable("VideoGenre", (string)null);
                });

            modelBuilder.Entity("Reels.Backoffice.Domain.Models.Genre.GenreCategory", b =>
                {
                    b.HasOne("Reels.Backoffice.Domain.Models.Genre.Genre", "Genre")
                        .WithMany("GenreCategories")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_genre_category_genre_genre_id");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Reels.Backoffice.Domain.Models.Video.Video", b =>
                {
                    b.HasOne("Reels.Backoffice.Domain.Models.Video.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .HasConstraintName("fk_video_media_media_id");

                    b.HasOne("Reels.Backoffice.Domain.Models.Video.Media", "Trailer")
                        .WithMany()
                        .HasForeignKey("TrailerId")
                        .HasConstraintName("fk_video_media_trailer_id");

                    b.OwnsOne("Reels.Backoffice.Domain.Models.Video.ValueObjects.Image", "Banner", b1 =>
                        {
                            b1.Property<Guid>("VideoId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Path")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("BannerPath");

                            b1.HasKey("VideoId");

                            b1.ToTable("Video");

                            b1.WithOwner()
                                .HasForeignKey("VideoId")
                                .HasConstraintName("fk_video_video_id");
                        });

                    b.OwnsOne("Reels.Backoffice.Domain.Models.Video.ValueObjects.Image", "Thumb", b1 =>
                        {
                            b1.Property<Guid>("VideoId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Path")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ThumbPath");

                            b1.HasKey("VideoId");

                            b1.ToTable("Video");

                            b1.WithOwner()
                                .HasForeignKey("VideoId")
                                .HasConstraintName("fk_video_video_id");
                        });

                    b.OwnsOne("Reels.Backoffice.Domain.Models.Video.ValueObjects.Image", "ThumbHalf", b1 =>
                        {
                            b1.Property<Guid>("VideoId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Path")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("thumbHalfPath");

                            b1.HasKey("VideoId");

                            b1.ToTable("Video");

                            b1.WithOwner()
                                .HasForeignKey("VideoId")
                                .HasConstraintName("fk_video_video_id");
                        });

                    b.Navigation("Banner");

                    b.Navigation("Media");

                    b.Navigation("Thumb");

                    b.Navigation("ThumbHalf");

                    b.Navigation("Trailer");
                });

            modelBuilder.Entity("Reels.Backoffice.Domain.Models.Video.VideoCategory", b =>
                {
                    b.HasOne("Reels.Backoffice.Domain.Models.Video.Video", null)
                        .WithMany("Categories")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_video_category_video_video_id");
                });

            modelBuilder.Entity("Reels.Backoffice.Domain.Models.Video.VideoGenre", b =>
                {
                    b.HasOne("Reels.Backoffice.Domain.Models.Video.Video", null)
                        .WithMany("Genres")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_video_genre_video_video_id");
                });

            modelBuilder.Entity("Reels.Backoffice.Domain.Models.Genre.Genre", b =>
                {
                    b.Navigation("GenreCategories");
                });

            modelBuilder.Entity("Reels.Backoffice.Domain.Models.Video.Video", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Genres");
                });
#pragma warning restore 612, 618
        }
    }
}
